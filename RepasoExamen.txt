¿Qué hace la anotación @RestController en Spring Boot?
*A) Clase que permite el acceso a métodos desde peticiones http
B) Configura la seguridad de la API REST.
C) Inicia automáticamente la base de datos embebida.
D) Crea una interfaz de usuario web en HTML.

¿Cuál de las siguientes anotaciones se usa para definir el punto de entrada de una aplicación Spring Boot?
*A) @SpringBootApplication
B) @EnableBoot
C) @SpringApplication
D) @SpringMain

¿Cuál de las siguientes interfaces proporciona métodos adicionales como findAll() con paginación y ordenación en Spring Data JPA?
a) CrudRepository
*b) JpaRepository
c) PagingAndSortingRepository
d) SimpleJpaRepository

¿Cómo se define correctamente una consulta personalizada en un repositorio de Spring Data JPA usando @Query?
a) @Query("SELECT u FROM User u WHERE email = ?1") User findByEmail(String email);
b) @Query("SELECT * FROM users WHERE email = ?1") User findByEmail(String email);
c) @Query("FROM User WHERE email = ?1") User findByEmail(String email);
* d) @Query("SELECT u FROM User u WHERE u.email = :email") User findByEmail(@Param("email") String email);

En Hibernate, ¿cuál es la estrategia de carga predeterminada para las relaciones @OneToMany y @ManyToMany si no se especifica fetch?
a) EAGER (Carga inmediata)
* b) LAZY (Carga diferida)
c) AUTO (Depende de la implementación de JPA)
d) IMMEDIATE (Carga en el mismo momento de la consulta)

¿Cuál de las siguientes opciones describe correctamente el propósito de la caché de segundo nivel en Hibernate?
a) Almacena temporalmente los resultados de las consultas SQL para mejorar el rendimiento.
* b) Permite simplificar el tratamiento de los objetos con mapeos sobre la base de datos, guardadolo para la posterior transacción
c) Se usa solo para almacenar entidades que no cambian con frecuencia y evita por completo el acceso a la base de datos.
d) Es el mecanismo principal de Hibernate para manejar la concurrencia entre múltiples transacciones.


¿En hibernate en el caso de tener una query de ejecucion recurrente, que tipo de query es recomendable utilizar?

a) construida con HQL
b) construida con SQL
* c) contruida con NamedQuery 
d) cualquiera de las anteriores, siempre y cuando se utilice el getCurrentSession

En el caso de querer una query select con clausula where, es necesario utilizar

a) el metodo get de una session
b) el metodo getUnique de una session
* c) un objeto de tipo query, utilizando HQL o nameQuery
d) cualquier de las anteriores

Si quiero construir una applicacion JavaFX, las ventanas se denominan:

a) Scene
* b) Stage
c) Node
d) Application

Indica cual de las siguientes firmas es correcta

a) ClaseA extends Interfaz
b) ClaseA implments InterfazB extends ClaseB, InterfazB
c) ClaseA extends ClaseA, ClaseB implmentes InterfazA, InterfazB
* d) ClaseA extends ClaseB implements InterfazA

Indica cual de las siguientes afirmaciones es correcta de las clases abstractas:

a) solo tiene métodos abstractos -> Interfaz
b) tiene al menos un método abstracto
c) todos sus métodos estan definidos, pero no tienen contructores
* d) ninguna de las anteriores

El concepto de polimorfirmo hace referencia a:

a) que los atributos de una clase deben ser privados -> encapsulamiento
* b) que una clase puede crearse de tantos tipos como tenga en herencia o implementaciones
c) que las clases deben tener un constructor vacio
d) que las clases de las cuales heredo, deben tener los atributos protected o publicos


ClaseA extends ClaseB implements InterfazA
ClaseC extends ClaseB implements InterfazA
ClaseD extends ClaseB implements InterfazA
ClaseE extends ClaseB implements InterfazA

Arraylist<ClaseB> cosas = new Arraylist
ClaseA a = new ClaseA
ClaseC a = new ClaseC
ClaseD a = new ClaseD
ClaseE a = new ClaseE

for ( ClaseB item : cosas ){
	if (item instaceof ClaseA){
		((ClaseA)item).m1()
	}
	item.m4()
}


ClaseA a = new ClaseA
a.m6() -> SI
a.m4() -> SI
a.m1() -> SI

ClaseB a = new ClaseA
a.m4() -> SI
a.m1() -> NO
a.m5() -> SI
a.m6() -> SI

((ClaseA)a).m1

Interfaz a = new ClaseA
a.m1() -> NO
a.m5() -> NO
a.m6() -> SI



ClaseA
	m1
	m2
	m3

ClaseB
	m4
	m5

Interfaz
	m6

public abstract class ClaseA
{
	
	public ClaseA(String dato){}
	public ClaseA(){}

	public void miMetodo1(){asdasdasdasdasdasdasd}
	public void miMetodo2(){asdasdasdasdasdasdasd}
	public void miMetodo3(){asdasdasdasdasdasdasd}
	public void miMetodo4(){asdasdasdasdasdasdasd}	
}

psvm(){
	ClaseA a = new ClaseA();
}





PARTE TEST

20 preguntas de selección única -> una sola respuesta

PARTE PRÁCTICA

hibernate
javafx
spring boot (hibernate, spring boot, jdbc)

Casos de uso

haz una app para poder gestionar una base de datos con esta estructura (XAMP MySQL - DBeaver  (estructura de base de datos) -> SQL) con los siguientes mapeos

- X /cosa
	- /anadir (pedir un parametro por body) y ejecutar la insercion
	- / borrar (pido como query parame) y ejecuto el borrado del elemento. En el caso en que no este el usuario den base datos, responder con un mensaje de error

localhost:8080/cosa/anadir body {nombre:"borja",apellido:"martin",pass:"1234"}
localhost:8080/cosa/borrar/1 query {nombre:"borja",apellido:"martin",pass:"1234"}


https://www.miapi.com/v3/api/endpoint

DOMINIO1 (miapi)			DOMINIO2 (localhost)
					 <-		peticion


